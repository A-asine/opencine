cmake_minimum_required(VERSION 2.8)
PROJECT(OpenCine)

set(CMAKE_AUTOMOC TRUE)
set(CMAKE_INCLUDE_CURRENT_DIR ON)

FIND_PACKAGE(Qt5Core REQUIRED)
FIND_PACKAGE(Qt5Widgets REQUIRED)
FIND_PACKAGE(Qt5QuickWidgets REQUIRED)

INCLUDE_DIRECTORIES(${Qt5Widgets_INCLUDES})
INCLUDE_DIRECTORIES(${Qt5QuickWidgets_INCLUDE_DIRS})

#INCLUDE_DIRECTORIES(${CMAKE_CURRENT_SOURCE_DIR})

FILE(GLOB SOURCE_FILES *.cpp)
FILE(GLOB HEADER_FSILES *.h)
FILE(GLOB UI_FILES *.ui)
FILE(GLOB RESOURCE_FILES *.qrc)

FILE(COPY "Themes" DESTINATION ${CMAKE_BINARY_DIR}/bin)
FILE(COPY "Icons" DESTINATION ${CMAKE_BINARY_DIR}/bin)
FILE(COPY "Widgets" DESTINATION ${CMAKE_BINARY_DIR}/bin)

QT5_WRAP_UI(UI_FILES_MOC ${UI_FILES})
#QT5_WRAP_CPP(SOURCE_MOC ${SOURCE_FILES})
QT5_ADD_RESOURCES(UI_RESOURCES ${RESOURCE_FILES})

if(CMAKE_SYSTEM_NAME STREQUAL "Linux")
	ADD_EXECUTABLE(${PROJECT_NAME} ${SOURCE_FILES} ${HEADER_FILES} ${UI_FILES_MOC} ${SOURCE_MOC} ${RESOURCE_FILES})
	TARGET_LINK_LIBRARIES(${PROJECT_NAME} ${QT_QTMAIN_LIBRARY} ${QT_LIBRARIES} ${Qt5QuickWidgets_LIBRARIES} CinemaDNGDecoder /home/andi/Source/OpenCine/build/lib/libraw.so)

elseif(CMAKE_SYSTEM_NAME STREQUAL "Windows")
	ADD_EXECUTABLE(${PROJECT_NAME} WIN32 ${SOURCE_FILES} ${HEADER_FILES} ${UI_FILES_MOC} ${HEADERS_MOC} ${RESOURCE_FILES})

	INCLUDE(BundleUtilities)
	fixup_bundle(${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/${PROJECT_NAME}.exe ""  $ENV{CMAKE_PREFIX_PATH})

	#Source: http://www.cmake.org/Wiki/CMake/Tutorials/Qt
	if(MSVC) # Check if we are using the Visual Studio compiler
		SET_TARGET_PROPERTIES(${PROJECT_NAME} PROPERTIES LINK_FLAGS "/SUBSYSTEM:windows")
		SET_TARGET_PROPERTIES(${PROJECT_NAME} PROPERTIES LINK_FLAGS "/ENTRY:mainCRTStartup")
	elseif(CMAKE_COMPILER_IS_GNUCXX)
		# SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -mwindows") # Not tested
	else()
		message(SEND_ERROR "You are using an unsupported Windows compiler! (Not MSVC or GCC)")
	endif()
endif()

INCLUDE_DIRECTORIES(${CMAKE_CURRENT_BINARY_DIR})

QT5_USE_MODULES(${PROJECT_NAME} Widgets Declarative)
